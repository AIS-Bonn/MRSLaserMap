<!--  -->
<launch>
  <arg name="scan_assembler_frame_id" default="/odom" />
  <arg name="build_alloc_map" default="true" />
  <arg name="registration_max_iterations" default="100" />
  <arg name="registration_prior_prob" default="0.25" />
  <arg name="registration_soft_assoc_c1" default="0.9" />
  <arg name="registration_soft_assoc_c2" default="10" />
  <arg name="registration_sigma_size_factor" default="0.45" /> 
  
  <!-- self filter -->    
  <node pkg="ais_laser_filters" type="cloud_to_cloud_filter_chain" output="screen" name="cloud_filters">
    <remap from="~input" to="/velodyne_points" />
    <remap from="~output" to="/velodyne_points_filtered" />
    <param name="tf_message_filter_target_frame" type="string" value="base_link"/>
    <rosparam command="load" file="$(find mrs_laser_mapping)/config/momaro_velodyne_filter.yaml" />
  </node>
  
  <!-- nodelet manager -->
  <node pkg="nodelet" type="nodelet" name="mapping_nodelet"  args="manager" output="screen"/>
  
  <!-- scan assembler nodelet -->
  <node pkg="nodelet" type="nodelet" name="velodyne_assembler_nodelet" args="load mrs_laser_mapping/velodyne_assembler_nodelet mapping_nodelet" output="screen" >
    <remap from="~input" to="/velodyne_points_filtered" />
    <remap from="~output" to="/scan_assembler_nodelet/assembled_cloud" />
    
    <param name="frame_id" value="$(arg scan_assembler_frame_id)"/>
    <param name="transform_wait_duration" type="double" value="0.3" />
    <param name="add_invalid_points" value="false"/>
    <param name="half_rotation" value="true"/>
    <param name="scan_line_number_by_stamp" value="true"/>
  </node>
  
  <!-- map nodelet for local mapping -->
  <node pkg="nodelet" type="nodelet" name="map_nodelet" args="load mrs_laser_mapping/map_nodelet mapping_nodelet" output="screen" >
    <remap from="~input" to="/scan_assembler_nodelet/assembled_cloud" />
  
    <!-- frame id in which the scanlines are assembled -->
    <param name="scan_assembler_frame_id" type="str" value="$(arg scan_assembler_frame_id)" />

    <!-- frame id of the sensor (for raytracing) -->
    <param name="sensor_frame_id" type="str" value="laser_scanner_origin" />

    <!-- first n scans are not registered to the map (e.g if robot is standing) -->
    <param name="min_scans_registration" type="int" value="0" />
  
    <!-- first n local maps are not published to the global mapping (to avoid sparse maps in alloc. map) -->
    <param name="min_scans_for_map_publishing" type="int" value="3" />
    <!-- duration in seconds for waiting for a transform  -->
    <param name="transform_wait_duration" type="double" value="0.2" />

    <!-- parameters for registration -->
    <param name="registration_max_iterations" type="int" value="$(arg registration_max_iterations)" />
    <param name="registration_prior_prob" type="double" value="$(arg registration_prior_prob)" />
    <param name="registration_soft_assoc_c1" type="double" value="$(arg registration_soft_assoc_c1)" />
    <param name="registration_soft_assoc_c2" type="int" value="$(arg registration_soft_assoc_c2)" />
    <param name="registration_sigma_size_factor" type="double" value="$(arg registration_sigma_size_factor)" /> 

    <!-- parameters for the local map -->
    <param name="map_size" type="int" value="256" />
    <param name="map_resolution" type="double" value="16.0" />
    <param name="map_levels" type="int" value="6" />
    <param name="map_cell_capacity" type="int" value="5000" />
    
    <param name="scan_window_local_map" type="int" value="0" />

    <!-- parameters for downsampled map (for visualization) -->
    <param name="map_downsampled_size" type="int" value="256" />
    <param name="map_downsampled_resolution" type="double" value="20.0" />
    <param name="map_downsampled_levels" type="int" value="6" />
    <param name="map_downsampled_cell_capacity" type="int" value="100" />

    <!-- add scans when troso is rotated. Set to false if torso rotation results in artifacts. Default: true-->
    <param name="add_scans_when_torso_rotated" type="bool" value="true" />
    <param name="add_scans_when_wheel_rotated" type="bool" value="false" />
    <param name="wheel_rotation_thresh" type="double" value="0.05" />
    <param name="wheel_rotation_var_thresh" type="double" value="0.01" />

    <param name="decrease_rate" type="double" value="0.0" />
  </node>
  
  
  <group if="$(arg build_alloc_map)">
   <!-- nodelet for allocentric mapping -->
   <node pkg="nodelet" type="nodelet" name="slam_nodelet" args="load mrs_laser_mapping/slam_nodelet mapping_nodelet" output="screen" >
    <remap from="~map" to="/mapping_nodelet/multires_map" />

    <param name="odom_frame_id" type="str" value="$(arg scan_assembler_frame_id)" />
    
    <!-- parameters for the registration method -->
    <param name="max_iter" type="int" value="$(arg registration_max_iterations)" />
    <param name="prior_prob" type="double" value="$(arg registration_prior_prob)" />
    <param name="soft_assoc_c1" type="double" value="$(arg registration_soft_assoc_c1)" />
    <param name="soft_assoc_c2" type="int" value="$(arg registration_soft_assoc_c2)" />
    <param name="sigma_size_factor" type="double" value="$(arg registration_sigma_size_factor)" /> 

    <param name="add_vertex_dist" type="double" value="5.0" />
    <param name="add_vertex_angle" type="double" value="0.5" />
    <param name="connect_vertex_dist" type="double" value="10.0" />
    <param name="add_vertex_by_distance" type="bool" value="true" />
   </node>
  
   <!-- nodelet for visualizing the allocentric map -->
   <node pkg="nodelet" type="nodelet" name="slam_visualizer_nodelet" args="load mrs_laser_mapping/slam_visualizer_nodelet mapping_nodelet" output="screen" >
    <remap from="~keyframe_transforms" to="/mapping_nodelet/keyframe_transforms" />
    <remap from="~keyframes" to="/mapping_nodelet/keyframes" />
    <param name="voxel_leaf_size" type="double" value="0.25" />
    <param name="filter_limit_min_z" type="double" value="-40.0" /> 	      
    <param name="filter_limit_max_z" type="double" value="40.0" /> 	      
    <param name="filter_limit_min_x" type="double" value="-40.0" /> 	      
    <param name="filter_limit_max_x" type="double" value="40.0" /> 	      
    <param name="filter_limit_min_y" type="double" value="-40.0" /> 	      
    <param name="filter_limit_max_y" type="double" value="40.0" /> 	      
   </node>
  
  </group>
  
  <!-- 
    static transform publisher for the map frame 
    due to momaros TF tree, odom is the root of the tree and map is child of world_corrected or world_corrected_slam (depending on local or alloc. mapping)
  -->
  <node if="$(arg build_alloc_map)" pkg="tf" name="static_map_transform" type="static_transform_publisher" args="0 0 0 0 0 0 world_corrected_slam map 10" />
  <node unless="$(arg build_alloc_map)" pkg="tf" name="static_map_transform" type="static_transform_publisher" args="-10 -10 0 0 0 0 world_corrected map 10" /> 
</launch>
		
